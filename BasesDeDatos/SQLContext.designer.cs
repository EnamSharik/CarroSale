#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tablas.BasesDeDatos
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VEHICULOS")]
	public partial class SQLContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertTRADEMARK(TRADEMARK instance);
    partial void UpdateTRADEMARK(TRADEMARK instance);
    partial void DeleteTRADEMARK(TRADEMARK instance);
    partial void InsertOWNER(OWNER instance);
    partial void UpdateOWNER(OWNER instance);
    partial void DeleteOWNER(OWNER instance);
    partial void InsertMODEL(MODEL instance);
    partial void UpdateMODEL(MODEL instance);
    partial void DeleteMODEL(MODEL instance);
    partial void InsertVEHICLE(VEHICLE instance);
    partial void UpdateVEHICLE(VEHICLE instance);
    partial void DeleteVEHICLE(VEHICLE instance);
    #endregion
		
		public SQLContextDataContext() : 
				base(global::Tablas.Properties.Settings.Default.VEHICULOSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SQLContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SQLContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TRADEMARK> TRADEMARK
		{
			get
			{
				return this.GetTable<TRADEMARK>();
			}
		}
		
		public System.Data.Linq.Table<OWNER> OWNER
		{
			get
			{
				return this.GetTable<OWNER>();
			}
		}
		
		public System.Data.Linq.Table<MODEL> MODEL
		{
			get
			{
				return this.GetTable<MODEL>();
			}
		}
		
		public System.Data.Linq.Table<VEHICLE> VEHICLE
		{
			get
			{
				return this.GetTable<VEHICLE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRADEMARK")]
	public partial class TRADEMARK : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_TRADEMARK;
		
		private string _NAME;
		
		private System.Nullable<bool> _STATE;
		
		private EntitySet<MODEL> _MODEL;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TRADEMARKChanging(int value);
    partial void OnID_TRADEMARKChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnSTATEChanging(System.Nullable<bool> value);
    partial void OnSTATEChanged();
    #endregion
		
		public TRADEMARK()
		{
			this._MODEL = new EntitySet<MODEL>(new Action<MODEL>(this.attach_MODEL), new Action<MODEL>(this.detach_MODEL));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TRADEMARK", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_TRADEMARK
		{
			get
			{
				return this._ID_TRADEMARK;
			}
			set
			{
				if ((this._ID_TRADEMARK != value))
				{
					this.OnID_TRADEMARKChanging(value);
					this.SendPropertyChanging();
					this._ID_TRADEMARK = value;
					this.SendPropertyChanged("ID_TRADEMARK");
					this.OnID_TRADEMARKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATE", DbType="Bit")]
		public System.Nullable<bool> STATE
		{
			get
			{
				return this._STATE;
			}
			set
			{
				if ((this._STATE != value))
				{
					this.OnSTATEChanging(value);
					this.SendPropertyChanging();
					this._STATE = value;
					this.SendPropertyChanged("STATE");
					this.OnSTATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRADEMARK_MODEL", Storage="_MODEL", ThisKey="ID_TRADEMARK", OtherKey="ID_TRADEMARK")]
		public EntitySet<MODEL> MODEL
		{
			get
			{
				return this._MODEL;
			}
			set
			{
				this._MODEL.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MODEL(MODEL entity)
		{
			this.SendPropertyChanging();
			entity.TRADEMARK = this;
		}
		
		private void detach_MODEL(MODEL entity)
		{
			this.SendPropertyChanging();
			entity.TRADEMARK = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OWNER")]
	public partial class OWNER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_OWNER;
		
		private string _NAME1;
		
		private string _NAME2;
		
		private string _LASTN1;
		
		private string _LASTN2;
		
		private string _NUMBERPHONE;
		
		private string _DPI;
		
		private string _GENRE;
		
		private string _DIRECTION;
		
		private string _EMAIL;
		
		private string _NIT;
		
		private System.Nullable<bool> _STATE;
		
		private EntitySet<VEHICLE> _VEHICLE;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_OWNERChanging(int value);
    partial void OnID_OWNERChanged();
    partial void OnNAME1Changing(string value);
    partial void OnNAME1Changed();
    partial void OnNAME2Changing(string value);
    partial void OnNAME2Changed();
    partial void OnLASTN1Changing(string value);
    partial void OnLASTN1Changed();
    partial void OnLASTN2Changing(string value);
    partial void OnLASTN2Changed();
    partial void OnNUMBERPHONEChanging(string value);
    partial void OnNUMBERPHONEChanged();
    partial void OnDPIChanging(string value);
    partial void OnDPIChanged();
    partial void OnGENREChanging(string value);
    partial void OnGENREChanged();
    partial void OnDIRECTIONChanging(string value);
    partial void OnDIRECTIONChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnNITChanging(string value);
    partial void OnNITChanged();
    partial void OnSTATEChanging(System.Nullable<bool> value);
    partial void OnSTATEChanged();
    #endregion
		
		public OWNER()
		{
			this._VEHICLE = new EntitySet<VEHICLE>(new Action<VEHICLE>(this.attach_VEHICLE), new Action<VEHICLE>(this.detach_VEHICLE));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_OWNER", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_OWNER
		{
			get
			{
				return this._ID_OWNER;
			}
			set
			{
				if ((this._ID_OWNER != value))
				{
					this.OnID_OWNERChanging(value);
					this.SendPropertyChanging();
					this._ID_OWNER = value;
					this.SendPropertyChanged("ID_OWNER");
					this.OnID_OWNERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NAME1
		{
			get
			{
				return this._NAME1;
			}
			set
			{
				if ((this._NAME1 != value))
				{
					this.OnNAME1Changing(value);
					this.SendPropertyChanging();
					this._NAME1 = value;
					this.SendPropertyChanged("NAME1");
					this.OnNAME1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME2", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NAME2
		{
			get
			{
				return this._NAME2;
			}
			set
			{
				if ((this._NAME2 != value))
				{
					this.OnNAME2Changing(value);
					this.SendPropertyChanging();
					this._NAME2 = value;
					this.SendPropertyChanged("NAME2");
					this.OnNAME2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LASTN1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string LASTN1
		{
			get
			{
				return this._LASTN1;
			}
			set
			{
				if ((this._LASTN1 != value))
				{
					this.OnLASTN1Changing(value);
					this.SendPropertyChanging();
					this._LASTN1 = value;
					this.SendPropertyChanged("LASTN1");
					this.OnLASTN1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LASTN2", DbType="NVarChar(100)")]
		public string LASTN2
		{
			get
			{
				return this._LASTN2;
			}
			set
			{
				if ((this._LASTN2 != value))
				{
					this.OnLASTN2Changing(value);
					this.SendPropertyChanging();
					this._LASTN2 = value;
					this.SendPropertyChanged("LASTN2");
					this.OnLASTN2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NUMBERPHONE", DbType="NVarChar(8)")]
		public string NUMBERPHONE
		{
			get
			{
				return this._NUMBERPHONE;
			}
			set
			{
				if ((this._NUMBERPHONE != value))
				{
					this.OnNUMBERPHONEChanging(value);
					this.SendPropertyChanging();
					this._NUMBERPHONE = value;
					this.SendPropertyChanged("NUMBERPHONE");
					this.OnNUMBERPHONEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DPI", DbType="NVarChar(13) NOT NULL", CanBeNull=false)]
		public string DPI
		{
			get
			{
				return this._DPI;
			}
			set
			{
				if ((this._DPI != value))
				{
					this.OnDPIChanging(value);
					this.SendPropertyChanging();
					this._DPI = value;
					this.SendPropertyChanged("DPI");
					this.OnDPIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GENRE", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string GENRE
		{
			get
			{
				return this._GENRE;
			}
			set
			{
				if ((this._GENRE != value))
				{
					this.OnGENREChanging(value);
					this.SendPropertyChanging();
					this._GENRE = value;
					this.SendPropertyChanged("GENRE");
					this.OnGENREChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIRECTION", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string DIRECTION
		{
			get
			{
				return this._DIRECTION;
			}
			set
			{
				if ((this._DIRECTION != value))
				{
					this.OnDIRECTIONChanging(value);
					this.SendPropertyChanging();
					this._DIRECTION = value;
					this.SendPropertyChanged("DIRECTION");
					this.OnDIRECTIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="NVarChar(150)")]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NIT", DbType="NVarChar(10)")]
		public string NIT
		{
			get
			{
				return this._NIT;
			}
			set
			{
				if ((this._NIT != value))
				{
					this.OnNITChanging(value);
					this.SendPropertyChanging();
					this._NIT = value;
					this.SendPropertyChanged("NIT");
					this.OnNITChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATE", DbType="Bit")]
		public System.Nullable<bool> STATE
		{
			get
			{
				return this._STATE;
			}
			set
			{
				if ((this._STATE != value))
				{
					this.OnSTATEChanging(value);
					this.SendPropertyChanging();
					this._STATE = value;
					this.SendPropertyChanged("STATE");
					this.OnSTATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OWNER_VEHICLE", Storage="_VEHICLE", ThisKey="ID_OWNER", OtherKey="ID_OWNER")]
		public EntitySet<VEHICLE> VEHICLE
		{
			get
			{
				return this._VEHICLE;
			}
			set
			{
				this._VEHICLE.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VEHICLE(VEHICLE entity)
		{
			this.SendPropertyChanging();
			entity.OWNER = this;
		}
		
		private void detach_VEHICLE(VEHICLE entity)
		{
			this.SendPropertyChanging();
			entity.OWNER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MODEL")]
	public partial class MODEL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_MODEL;
		
		private int _ID_TRADEMARK;
		
		private string _NAME;
		
		private System.Nullable<bool> _STATE;
		
		private EntitySet<VEHICLE> _VEHICLE;
		
		private EntityRef<TRADEMARK> _TRADEMARK;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MODELChanging(int value);
    partial void OnID_MODELChanged();
    partial void OnID_TRADEMARKChanging(int value);
    partial void OnID_TRADEMARKChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnSTATEChanging(System.Nullable<bool> value);
    partial void OnSTATEChanged();
    #endregion
		
		public MODEL()
		{
			this._VEHICLE = new EntitySet<VEHICLE>(new Action<VEHICLE>(this.attach_VEHICLE), new Action<VEHICLE>(this.detach_VEHICLE));
			this._TRADEMARK = default(EntityRef<TRADEMARK>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_MODEL", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_MODEL
		{
			get
			{
				return this._ID_MODEL;
			}
			set
			{
				if ((this._ID_MODEL != value))
				{
					this.OnID_MODELChanging(value);
					this.SendPropertyChanging();
					this._ID_MODEL = value;
					this.SendPropertyChanged("ID_MODEL");
					this.OnID_MODELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_TRADEMARK", DbType="Int NOT NULL")]
		public int ID_TRADEMARK
		{
			get
			{
				return this._ID_TRADEMARK;
			}
			set
			{
				if ((this._ID_TRADEMARK != value))
				{
					if (this._TRADEMARK.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TRADEMARKChanging(value);
					this.SendPropertyChanging();
					this._ID_TRADEMARK = value;
					this.SendPropertyChanged("ID_TRADEMARK");
					this.OnID_TRADEMARKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATE", DbType="Bit")]
		public System.Nullable<bool> STATE
		{
			get
			{
				return this._STATE;
			}
			set
			{
				if ((this._STATE != value))
				{
					this.OnSTATEChanging(value);
					this.SendPropertyChanging();
					this._STATE = value;
					this.SendPropertyChanged("STATE");
					this.OnSTATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MODEL_VEHICLE", Storage="_VEHICLE", ThisKey="ID_MODEL", OtherKey="ID_MODEL")]
		public EntitySet<VEHICLE> VEHICLE
		{
			get
			{
				return this._VEHICLE;
			}
			set
			{
				this._VEHICLE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRADEMARK_MODEL", Storage="_TRADEMARK", ThisKey="ID_TRADEMARK", OtherKey="ID_TRADEMARK", IsForeignKey=true)]
		public TRADEMARK TRADEMARK
		{
			get
			{
				return this._TRADEMARK.Entity;
			}
			set
			{
				TRADEMARK previousValue = this._TRADEMARK.Entity;
				if (((previousValue != value) 
							|| (this._TRADEMARK.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TRADEMARK.Entity = null;
						previousValue.MODEL.Remove(this);
					}
					this._TRADEMARK.Entity = value;
					if ((value != null))
					{
						value.MODEL.Add(this);
						this._ID_TRADEMARK = value.ID_TRADEMARK;
					}
					else
					{
						this._ID_TRADEMARK = default(int);
					}
					this.SendPropertyChanged("TRADEMARK");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_VEHICLE(VEHICLE entity)
		{
			this.SendPropertyChanging();
			entity.MODEL = this;
		}
		
		private void detach_VEHICLE(VEHICLE entity)
		{
			this.SendPropertyChanging();
			entity.MODEL = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VEHICLE")]
	public partial class VEHICLE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PLACA;
		
		private int _ID_OWNER;
		
		private int _ID_MODEL;
		
		private string _YEAR;
		
		private System.Nullable<bool> _STATE;
		
		private int _ID_VEHICLE;
		
		private string _VEHICLE_STATE;
		
		private EntityRef<MODEL> _MODEL;
		
		private EntityRef<OWNER> _OWNER;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPLACAChanging(string value);
    partial void OnPLACAChanged();
    partial void OnID_OWNERChanging(int value);
    partial void OnID_OWNERChanged();
    partial void OnID_MODELChanging(int value);
    partial void OnID_MODELChanged();
    partial void OnYEARChanging(string value);
    partial void OnYEARChanged();
    partial void OnSTATEChanging(System.Nullable<bool> value);
    partial void OnSTATEChanged();
    partial void OnID_VEHICLEChanging(int value);
    partial void OnID_VEHICLEChanged();
    partial void OnVEHICLE_STATEChanging(string value);
    partial void OnVEHICLE_STATEChanged();
    #endregion
		
		public VEHICLE()
		{
			this._MODEL = default(EntityRef<MODEL>);
			this._OWNER = default(EntityRef<OWNER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PLACA", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string PLACA
		{
			get
			{
				return this._PLACA;
			}
			set
			{
				if ((this._PLACA != value))
				{
					this.OnPLACAChanging(value);
					this.SendPropertyChanging();
					this._PLACA = value;
					this.SendPropertyChanged("PLACA");
					this.OnPLACAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_OWNER", DbType="Int NOT NULL")]
		public int ID_OWNER
		{
			get
			{
				return this._ID_OWNER;
			}
			set
			{
				if ((this._ID_OWNER != value))
				{
					if (this._OWNER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_OWNERChanging(value);
					this.SendPropertyChanging();
					this._ID_OWNER = value;
					this.SendPropertyChanged("ID_OWNER");
					this.OnID_OWNERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_MODEL", DbType="Int NOT NULL")]
		public int ID_MODEL
		{
			get
			{
				return this._ID_MODEL;
			}
			set
			{
				if ((this._ID_MODEL != value))
				{
					if (this._MODEL.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_MODELChanging(value);
					this.SendPropertyChanging();
					this._ID_MODEL = value;
					this.SendPropertyChanged("ID_MODEL");
					this.OnID_MODELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YEAR", DbType="NVarChar(4)")]
		public string YEAR
		{
			get
			{
				return this._YEAR;
			}
			set
			{
				if ((this._YEAR != value))
				{
					this.OnYEARChanging(value);
					this.SendPropertyChanging();
					this._YEAR = value;
					this.SendPropertyChanged("YEAR");
					this.OnYEARChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATE", DbType="Bit")]
		public System.Nullable<bool> STATE
		{
			get
			{
				return this._STATE;
			}
			set
			{
				if ((this._STATE != value))
				{
					this.OnSTATEChanging(value);
					this.SendPropertyChanging();
					this._STATE = value;
					this.SendPropertyChanged("STATE");
					this.OnSTATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_VEHICLE", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_VEHICLE
		{
			get
			{
				return this._ID_VEHICLE;
			}
			set
			{
				if ((this._ID_VEHICLE != value))
				{
					this.OnID_VEHICLEChanging(value);
					this.SendPropertyChanging();
					this._ID_VEHICLE = value;
					this.SendPropertyChanged("ID_VEHICLE");
					this.OnID_VEHICLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VEHICLE_STATE", DbType="NVarChar(20)")]
		public string VEHICLE_STATE
		{
			get
			{
				return this._VEHICLE_STATE;
			}
			set
			{
				if ((this._VEHICLE_STATE != value))
				{
					this.OnVEHICLE_STATEChanging(value);
					this.SendPropertyChanging();
					this._VEHICLE_STATE = value;
					this.SendPropertyChanged("VEHICLE_STATE");
					this.OnVEHICLE_STATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MODEL_VEHICLE", Storage="_MODEL", ThisKey="ID_MODEL", OtherKey="ID_MODEL", IsForeignKey=true)]
		public MODEL MODEL
		{
			get
			{
				return this._MODEL.Entity;
			}
			set
			{
				MODEL previousValue = this._MODEL.Entity;
				if (((previousValue != value) 
							|| (this._MODEL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MODEL.Entity = null;
						previousValue.VEHICLE.Remove(this);
					}
					this._MODEL.Entity = value;
					if ((value != null))
					{
						value.VEHICLE.Add(this);
						this._ID_MODEL = value.ID_MODEL;
					}
					else
					{
						this._ID_MODEL = default(int);
					}
					this.SendPropertyChanged("MODEL");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OWNER_VEHICLE", Storage="_OWNER", ThisKey="ID_OWNER", OtherKey="ID_OWNER", IsForeignKey=true)]
		public OWNER OWNER
		{
			get
			{
				return this._OWNER.Entity;
			}
			set
			{
				OWNER previousValue = this._OWNER.Entity;
				if (((previousValue != value) 
							|| (this._OWNER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OWNER.Entity = null;
						previousValue.VEHICLE.Remove(this);
					}
					this._OWNER.Entity = value;
					if ((value != null))
					{
						value.VEHICLE.Add(this);
						this._ID_OWNER = value.ID_OWNER;
					}
					else
					{
						this._ID_OWNER = default(int);
					}
					this.SendPropertyChanged("OWNER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
